% Generated by roxygen2 (4.0.2): do not edit by hand
\name{oldPackages}
\alias{oldPackages}
\title{Compare miniCRAN Packages with CRAN-like Repositories}
\usage{
oldPackages(path = NULL, repos = getOption("repos"),
  contriburl = contrib.url(repos, type), availPkgs = pkgAvail(repos = path,
  type = type), method, available = NULL, type = "source",
  Rversion = getRversion())
}
\arguments{
\item{path}{Destination download path. This path is the root folder of your new repository.}

\item{repos}{URL(s) of the 'contrib' sections of the repositories, e.g. \code{"http://cran.us.r-project.org"}. Passed to \code{\link{available.packages}}}

\item{contriburl}{URL(s) of the contrib sections of the repositories. Use this argument if your repository is incomplete. Overrides argument \code{repos}.}

\item{availPkgs}{by default all packages hosted in the miniCRAN repo, \code{\link{pkgAvail}(repos=path, type=type)}. A subset can be specified; currently this must be in the same (character matrix) format as returned by \code{\link{pkgAvail}()}.}

\item{method}{Download method, see \code{\link{download.file}}.}

\item{available}{an object as returned by \code{\link{available.packages}} listing packages available at the repositories, or \code{NULL} which makes an internal call to \code{\link{available.packages}}.}

\item{type}{character, indicating the type of package to download and install. See \code{\link{install.packages}}.}

\item{Rversion}{numeric version of the R system for which to fetch packages. See \code{\link{R_system_version}}.}
}
\value{
\code{NULL} or a matrix with one row per package, row names the package names and column names "Package", "LocalVer", "ReposVer", and "Repository".
}
\description{
\code{oldPackages} indicates packages which have a (suitable) later version on the repositories whereas \code{\link{updatePackages}} offers to download and install such packages.
}
\details{
These functions are based on \code{\link{update.packages}} and related, except rather than looking for locally installed packages they look for the package sources and binaries being hosted in the miniCRAN repository.
}
\examples{
### `oldPackages` and `updatePackages` require an existing miniCRAN repo

# Specify list of packages to download
revolution <- c(CRAN="http://cran.revolutionanalytics.com")
pkgs <- c("foreach")

pdb <- cranJuly2014

\dontrun{
  pdb <- pkgAvail(repos=revolution, type="source")
}

pkgList <- pkgDep(pkgs, availPkgs=pdb, repos=revolution, type="source", suggests=FALSE)
pkgList

\dontrun{
  # Create temporary folder for miniCRAN
  dir.create(pth <- file.path(tempdir(), "miniCRAN"))

  # create the miniCRAN directory structure but only add bin files
  makeRepo(pkgList, path=pth, repos=revolution, type="source", download=FALSE)
  makeRepo(pkgList, path=pth, repos=revolution, type="win.binary", download=TRUE)

  # download old source package version and create repo index
  oldVers <- data.frame(package=c("foreach", "codetools", "iterators"),
                        version=c("1.4.0", "0.2-7", "1.0.5"),
                        stringsAsFactors=FALSE)
  addOldPackage(pkgList, path=pth, vers=oldVers$version, type="source")
  # NOTE: older binary versions would need to be build from source

  # Check if updated packages are available
  oldPackages(path=pth, repos=revolution, type="source") # should need update
  oldPackages(path=pth, repos=revolution, type="win.binary") # should be current

  # Update available packages
  updatePackages(path=pth, repos=revolution, type="source") # should need update
  updatePackages(path=pth, repos=revolution, type="win.binary") # should be current

  # Delete temporary folder
  unlink(pth, recursive=TRUE)
}
}
\seealso{
\code{\link{updatePackages}}, \code{\link{pkgAvail}}.

Other update repo functions: \code{\link{addOldPackage}};
  \code{\link{addPackage}}; \code{\link{checkVersions}};
  \code{\link{makeRepo}}, \code{\link{updateRepoIndex}};
  \code{\link{updatePackages}}
}

