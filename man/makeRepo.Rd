% Generated by roxygen2 (4.0.1): do not edit by hand
\name{makeRepo}
\alias{Rversion}
\alias{makeRepo}
\title{Downloads packages from CRAN to specified path and creates a local repository.}
\usage{
makeRepo(pkgs, path, repos = getOption("repos"), type = "source",
  Rversion = Rversion(), download = TRUE, writePACKAGES = TRUE)

Rversion()
}
\arguments{
\item{pkgs}{Character vector of packages to download}

\item{path}{Destination download path}

\item{type}{Passed to \code{\link{download.packages}}}

\item{Rversion}{String of format "<major R version>.<minor R version>", e.g. "3.2". Only used if \code{type} is not "source"}

\item{download}{If TRUE downloads packages, otherwise just creates PACKAGES file}

\item{writePACKAGES}{If TRUE, calls \code{\link[tools]{write_PACKAGES}} to update the repository PACKAGES file}

\item{repos}{URL(s) of the 'contrib' sections of the repositories. Passed to \code{\link{available.packages}}}
}
\description{
Given a list of packages, downloads to a specified destination folder using the required CRAN folder structure then creates the PACKAGES index file.
}
\details{
The function \code{makeRepo} creates a repository, similar in structure to CRAN.  It optionally updates the PACKAGES file.  If done correctly, it is possible to use this folder as a repository, i.e. it will support functions like \code{\link[utils]{install.packages}()}.

Uses \code{\link{download.packages}} and \code{\link[tools]{write_PACKAGES}}
}
\examples{

# Specify list of packages to download
revolution <- c(CRAN="http://cran.revolutionanalytics.com")
pkgs <- c("foreach")

pdb <- cranJuly2014

\dontrun{
  pdb <- pkgAvail(
    repos = c(CRAN="http://cran.revolutionanalytics.com"),
    type="source"
  )
}

pkgList <- pkgDep(pkgs, availPkgs = pdb, repos=revolution, type="source", suggests=FALSE)
pkgList


\dontrun{
# Create temporary folder for miniCRAN
dir.create(pth <- file.path(tempdir(), "miniCRAN"))

# Make repo for source and win.binary
makeRepo(pkgList, path=pth, repos=revolution, download=TRUE, writePACKAGES=TRUE, type="source")

# List all files in miniCRAN
list.files(pth, recursive = TRUE)

# Check for available packages
pkgAvail(repos=pth, type="source")

# Repeat process for windows binaries
makeRepo(pkgList, path=pth, repos=revolution, download=TRUE, writePACKAGES=TRUE, type="win.binary")
pkgAvail(repos=pth, type="win.binary")

# Delete temporary folder
unlink(pth, recursive = TRUE)
}
}

