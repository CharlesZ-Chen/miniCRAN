% Generated by roxygen2 (4.0.2): do not edit by hand
\name{updatePackages}
\alias{updatePackages}
\title{Compare miniCRAN Packages with CRAN-like Repositories}
\usage{
updatePackages(path = NULL, repos = getOption("repos"), method,
  ask = TRUE, availPkgs = pkgAvail(repos = repos, type = type),
  oldPkgs = NULL, type = "source", Rversion = getRversion(),
  quiet = FALSE)
}
\arguments{
\item{path}{Destination download path. This path is the root folder of your new repository.}

\item{repos}{URL(s) of the 'contrib' sections of the repositories, e.g. \code{"http://cran.us.r-project.org"}. Passed to \code{\link{available.packages}}}

\item{method}{Download method, see \code{\link{download.file}}.}

\item{ask}{logical indicating whether to ask user before packages are actually downloaded and installed, or the character string "\code{graphics}", which brings up a widget to allow the user to (de-)select from the list of packages which could be updated or added. The latter value only works on systems with a GUI version of \code{\link{select.list}}, and is otherwise equivalent to \code{ask = TRUE}.}

\item{availPkgs}{Vector of available packages.  Defaults to reading this list from CRAN, using \code{\link{available.packages}}}

\item{oldPkgs}{if specified as non-NULL, updatePackages() only considers these packages for updating. This may be a character vector of package names or a matrix as returned by oldPackages().}

\item{type}{Possible values are (currently) "source", "mac.binary" and "win.binary": the binary types can be listed and downloaded but not installed on other platforms.  Passed to \code{\link{download.packages}}.}

\item{Rversion}{List with two named elements: `major` and `minor`. If not supplied, defaults to system version of R, using \code{\link{R.version}}.  Only used if \code{type} is not "source"}

\item{quiet}{If TRUE, suppress status messages (if any), and the progress bar during download.}
}
\value{
\code{NULL} invisibly.
}
\description{
\code{\link{oldPackages}} indicates packages which have a (suitable) later version on the repositories whereas \code{updatePackages} offers to download and install such packages.
}
\details{
These functions are based on \code{\link{update.packages}} and related, except rather than looking for locally installed packages they look for the package sources and binaries being hosted in the miniCRAN repository.
}
\examples{
### `oldPackages` and `updatePackages` require an existing miniCRAN repo

# Specify list of packages to download
revolution <- c(CRAN="http://cran.revolutionanalytics.com")
pkgs <- c("foreach")

pdb <- cranJuly2014

\dontrun{
  pdb <- pkgAvail(repos=revolution, type="source")
}

pkgList <- pkgDep(pkgs, availPkgs=pdb, repos=revolution, type="source", suggests=FALSE)
pkgList

\dontrun{
  # Create temporary folder for miniCRAN
  dir.create(pth <- file.path(tempdir(), "miniCRAN"))

  # create the miniCRAN directory structure but only add bin files
  makeRepo(pkgList, path=pth, repos=revolution, type="source", download=FALSE)
  makeRepo(pkgList, path=pth, repos=revolution, type="win.binary", download=TRUE)

  # download old source package version and create repo index
  oldVers <- data.frame(package=c("foreach", "codetools", "iterators"),
                        version=c("1.4.0", "0.2-7", "1.0.5"),
                        stringsAsFactors=FALSE)
  addOldPackage(pkgList, path=pth, vers=oldVers$version, type="source")
  # NOTE: older binary versions would need to be build from source

  # Check if updated packages are available
  oldPackages(path=pth, repos=revolution, type="source") # should need update
  oldPackages(path=pth, repos=revolution, type="win.binary") # should be current

  # Update available packages
  updatePackages(path=pth, repos=revolution, type="source") # should need update
  updatePackages(path=pth, repos=revolution, type="win.binary") # should be current

  # Delete temporary folder
  unlink(pth, recursive=TRUE)
}
}
\seealso{
Other update repo functions: \code{\link{addOldPackage}};
  \code{\link{addPackage}}; \code{\link{checkVersions}};
  \code{\link{makeRepo}}, \code{\link{updateRepoIndex}};
  \code{\link{oldPackages}}
}

